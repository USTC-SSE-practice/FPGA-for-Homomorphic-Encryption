// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="paillier_fl_kernel_paillier_fl_kernel,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.110313,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=316,HLS_SYN_LUT=356,HLS_VERSION=2022_2}" *)

module paillier_fl_kernel (
        ap_clk,
        ap_rst_n,
        data_in_TDATA,
        data_in_TVALID,
        data_in_TREADY,
        grad_stream_TDATA,
        grad_stream_TVALID,
        grad_stream_TREADY,
        data_out_TDATA,
        data_out_TVALID,
        data_out_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] data_in_TDATA;
input   data_in_TVALID;
output   data_in_TREADY;
input  [127:0] grad_stream_TDATA;
input   grad_stream_TVALID;
output   grad_stream_TREADY;
output  [127:0] data_out_TDATA;
output   data_out_TVALID;
input   data_out_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] num_samples;
wire   [31:0] num_clients;
wire   [30:0] trunc_ln163_fu_61_p1;
reg   [30:0] trunc_ln163_reg_71;
wire   [0:0] icmp_ln178_fu_65_p2;
reg   [0:0] icmp_ln178_reg_76;
wire    grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start;
wire    grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_done;
wire    grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_idle;
wire    grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_ready;
wire    grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TREADY;
wire    grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_in_TREADY;
wire   [127:0] grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TDATA;
wire    grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TVALID;
wire   [0:0] grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_return;
reg    grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    regslice_both_data_out_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_block_state3_on_subcall_done;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_both_data_in_U_apdone_blk;
wire   [127:0] data_in_TDATA_int_regslice;
wire    data_in_TVALID_int_regslice;
reg    data_in_TREADY_int_regslice;
wire    regslice_both_data_in_U_ack_in;
wire    regslice_both_grad_stream_U_apdone_blk;
wire   [127:0] grad_stream_TDATA_int_regslice;
wire    grad_stream_TVALID_int_regslice;
wire    regslice_both_grad_stream_U_ack_in;
wire    data_out_TREADY_int_regslice;
wire    regslice_both_data_out_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start_reg = 1'b0;
end

paillier_fl_kernel_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1 grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start),
    .ap_done(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_done),
    .ap_idle(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_idle),
    .ap_ready(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_ready),
    .data_in_TVALID(data_in_TVALID_int_regslice),
    .data_out_TREADY(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TREADY),
    .num_samples(trunc_ln163_reg_71),
    .data_in_TDATA(data_in_TDATA_int_regslice),
    .data_in_TREADY(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_in_TREADY),
    .data_out_TDATA(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TDATA),
    .data_out_TVALID(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TVALID),
    .ap_return(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_return)
);

paillier_fl_kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .num_samples(num_samples),
    .num_clients(num_clients),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

paillier_fl_kernel_regslice_both #(
    .DataWidth( 128 ))
regslice_both_data_in_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_in_TDATA),
    .vld_in(data_in_TVALID),
    .ack_in(regslice_both_data_in_U_ack_in),
    .data_out(data_in_TDATA_int_regslice),
    .vld_out(data_in_TVALID_int_regslice),
    .ack_out(data_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_data_in_U_apdone_blk)
);

paillier_fl_kernel_regslice_both #(
    .DataWidth( 128 ))
regslice_both_grad_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grad_stream_TDATA),
    .vld_in(grad_stream_TVALID),
    .ack_in(regslice_both_grad_stream_U_ack_in),
    .data_out(grad_stream_TDATA_int_regslice),
    .vld_out(grad_stream_TVALID_int_regslice),
    .ack_out(1'b0),
    .apdone_blk(regslice_both_grad_stream_U_apdone_blk)
);

paillier_fl_kernel_regslice_both #(
    .DataWidth( 128 ))
regslice_both_data_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TDATA),
    .vld_in(grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TVALID),
    .ack_in(data_out_TREADY_int_regslice),
    .data_out(data_out_TDATA),
    .vld_out(regslice_both_data_out_U_vld_out),
    .ack_out(data_out_TREADY),
    .apdone_blk(regslice_both_data_out_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_ready == 1'b1)) begin
            grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln178_reg_76 <= icmp_ln178_fu_65_p2;
        trunc_ln163_reg_71 <= trunc_ln163_fu_61_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_data_out_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_data_out_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_data_out_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_reg_76 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_in_TREADY_int_regslice = grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_in_TREADY;
    end else begin
        data_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln178_fu_65_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((icmp_ln178_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_data_out_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_done == 1'b0) & (icmp_ln178_reg_76 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_in_TREADY = regslice_both_data_in_U_ack_in;

assign data_out_TVALID = regslice_both_data_out_U_vld_out;

assign grad_stream_TREADY = regslice_both_grad_stream_U_ack_in;

assign grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start = grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_ap_start_reg;

assign grp_paillier_fl_kernel_Pipeline_VITIS_LOOP_178_1_fu_52_data_out_TREADY = (data_out_TREADY_int_regslice & ap_CS_fsm_state3);

assign icmp_ln178_fu_65_p2 = (($signed(num_samples) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign trunc_ln163_fu_61_p1 = num_samples[30:0];


reg find_kernel_block = 0;
// synthesis translate_off
`include "paillier_fl_kernel_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //paillier_fl_kernel

